<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>whl</title>
  
  <subtitle>每天进步一点点</subtitle>
  <link href="https://thiswhl.cn/atom.xml" rel="self"/>
  
  <link href="https://thiswhl.cn/"/>
  <updated>2021-11-06T02:20:01.033Z</updated>
  <id>https://thiswhl.cn/</id>
  
  <author>
    <name>温海龙</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>链表</title>
    <link href="https://thiswhl.cn/post/54862.html"/>
    <id>https://thiswhl.cn/post/54862.html</id>
    <published>2021-11-06T01:22:25.000Z</published>
    <updated>2021-11-06T02:20:01.033Z</updated>
    
    <content type="html"><![CDATA[<h2 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h2><table><thead><tr><th align="center">方法</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">append()</td><td align="center">向链表尾部追加元素</td></tr><tr><td align="center">insert()</td><td align="center">在链表的某个位置插入元素</td></tr><tr><td align="center">get()</td><td align="center">获取链表对应位置的元素</td></tr><tr><td align="center">indexOf()</td><td align="center">获取某元素在链表中的索引</td></tr><tr><td align="center">update()</td><td align="center">修改链表中某个位置上的元素的值</td></tr><tr><td align="center">removeAt()</td><td align="center">移除链表中某位置上的某元素</td></tr><tr><td align="center">isEmpty()</td><td align="center">判断链表内是否为空</td></tr><tr><td align="center">size()</td><td align="center">返回链表内元素个数</td></tr><tr><td align="center">toString()</td><td align="center">以字符串的形式展示链表内的所有元素</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 链表：</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     无论是要删除元素还是添加元素，每次都是要从 head 开始，依次往后查找元素，</span></span><br><span class="line"><span class="comment"> *     所以对于链表的每一个方法，我们每次做的就是从 head 开始遍历，并通过 next 找到每一个元素的下一个元素是谁。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">LinkeList</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">//属性</span></span><br><span class="line">  <span class="built_in">this</span>.head = <span class="literal">null</span>;</span><br><span class="line">  <span class="built_in">this</span>.length = <span class="number">0</span>;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 内部构造函数</span></span><br><span class="line"><span class="comment">   *    链表的每一个元素都有两个属性，即 item 和 next，分别表示存储着该元素的值和该元素的后一个元素是谁。</span></span><br><span class="line"><span class="comment">   *    所以我们就在链表的构造函数内部创建一个内部构造函数用于之后创建元素的实例对象</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="comment">//每个元素的定义类</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">Node</span>(<span class="params">item</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.item = item;</span><br><span class="line">    <span class="built_in">this</span>.next = <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">    append()方法就是将元素添加到链表的最后一个。</span></span><br><span class="line"><span class="comment">   * 思路</span></span><br><span class="line"><span class="comment">   *    1创建新的元素实例对象 node</span></span><br><span class="line"><span class="comment">        2判断 length 是否为0，若为0，则直接将 head 指向 node</span></span><br><span class="line"><span class="comment">        3若 length 不为0，则根据每个元素的 next 属性遍历链表</span></span><br><span class="line"><span class="comment">        4若元素的 next 的值不等于 null，继续遍历</span></span><br><span class="line"><span class="comment">        5若元素的 next 的值等于 null，则表示已经查找到链表的最后一个元素，所以直接将该元素的 next 值设置成 node 即可</span></span><br><span class="line"><span class="comment">        6属性 length + 1</span></span><br><span class="line"><span class="comment">   * </span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  LinkeList.prototype.append = <span class="function"><span class="keyword">function</span> (<span class="params">item</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> node = <span class="keyword">new</span> Node();</span><br><span class="line">    <span class="comment">//判断链表是否为空</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.length === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="built_in">this</span>.head = node;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> current = <span class="built_in">this</span>.head;</span><br><span class="line">      <span class="comment">//遍历链表，找到最后一个元素</span></span><br><span class="line">      <span class="keyword">while</span> (current.next) &#123;</span><br><span class="line">        current = current.next;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 4.将我们要添加的元素赋值给原本链表中的最后一个元素</span></span><br><span class="line">      current.next = node;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//链表元素+1</span></span><br><span class="line">    <span class="built_in">this</span>.length++;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * insert()方法就是在指定的索引位置插入元素。</span></span><br><span class="line"><span class="comment">   * 一共需要传入两个参数，第一个是 position，表示需要插入元素的位置；第二个参数是 item，表示元素的值</span></span><br><span class="line"><span class="comment">   * </span></span><br><span class="line"><span class="comment">   * 思路</span></span><br><span class="line"><span class="comment">   *  1创建新的元素实例对象 node</span></span><br><span class="line"><span class="comment">      2判断指定的索引位置 position 是否越界，即是否小于0，或者大于链表的长度。若越界了，则直接返回false</span></span><br><span class="line"><span class="comment">      3判断 position 是否为0。若为0，则直接将链表原本的第一个元素，也就是 head所对应的元素赋值给 node的 next属性，</span></span><br><span class="line"><span class="comment">       然后将 node赋值给 head，表示现在链表的第一个元素为 node</span></span><br><span class="line"><span class="comment">      4若 position 不为0，则遍历链表，同时记录遍历的索引 index 和遍历的上一个元素 prev，当 index == position时，</span></span><br><span class="line"><span class="comment">       将链表在 index索引位置上的元素赋值给 node的 next属性，再将 node赋值给 prev的 next属性</span></span><br><span class="line"><span class="comment">      5属性 length + 1</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  LinkeList.prototype.insert() = <span class="function"><span class="keyword">function</span> (<span class="params">position, item</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 1.创建新的元素实例对象</span></span><br><span class="line">    <span class="keyword">let</span> node = <span class="keyword">new</span> Node(item)</span><br><span class="line">    <span class="comment">// 2.判断是否越界</span></span><br><span class="line">    <span class="keyword">if</span> (position &lt; <span class="number">0</span> || position &gt; <span class="built_in">this</span>.length) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment">// 3.判断插入的位置是否为 0</span></span><br><span class="line">    <span class="keyword">if</span> (position === <span class="number">0</span>) &#123;</span><br><span class="line">      node.next = <span class="built_in">this</span>.head</span><br><span class="line">      <span class="built_in">this</span>.head = node</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 4.遍历链表，找到索引等于position的元素</span></span><br><span class="line">      <span class="keyword">let</span> current = <span class="built_in">this</span>.head</span><br><span class="line">      <span class="keyword">let</span> prev = <span class="literal">null</span></span><br><span class="line">      <span class="keyword">let</span> index = <span class="number">0</span></span><br><span class="line">      <span class="keyword">while</span> (index++ &lt; position) &#123;</span><br><span class="line">        prev = current</span><br><span class="line">        current = current.next</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 5.插入元素</span></span><br><span class="line">      prev.next = node</span><br><span class="line">      node.next = current</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 6.链表元素 +1</span></span><br><span class="line">    <span class="built_in">this</span>.length++</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// get()方法就是获取对应位置上的元素。需要传入一个参数，即 position，表示需要获取元素的索引</span></span><br><span class="line">  <span class="comment">//获取对应位置的元素</span></span><br><span class="line">  LinkedList.prototype.get = <span class="function"><span class="keyword">function</span> (<span class="params">position</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 1.判断是否越界</span></span><br><span class="line">    <span class="keyword">if</span> (position &lt; <span class="number">0</span> || position &gt;= <span class="built_in">this</span>.length) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    <span class="keyword">let</span> current = <span class="built_in">this</span>.head</span><br><span class="line">    <span class="keyword">let</span> index = <span class="number">0</span></span><br><span class="line">    <span class="comment">// 2.遍历链表，直到 index == position</span></span><br><span class="line">    <span class="keyword">while</span> (index++ &lt; position) &#123;</span><br><span class="line">      current = current.next</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 3.返回当前索引位置的元素</span></span><br><span class="line">    <span class="keyword">return</span> current.item</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * indexOf()方法就跟数组的一样，获取某元素在链表中的索引值，若链表中不存在该元素，则返回 -1</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  LinkeList.prototype.indexOf = <span class="function"><span class="keyword">function</span> (<span class="params">item</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> current = <span class="built_in">this</span>.head</span><br><span class="line">    <span class="keyword">let</span> index = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> (index &lt; <span class="built_in">this</span>.length) &#123;</span><br><span class="line">      <span class="keyword">if</span> (current.item == item) &#123;</span><br><span class="line">        <span class="keyword">return</span> index</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        current = current.next</span><br><span class="line">        index++</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * update()方法就是用于修改链表中某位置上的元素的值。第一个参数是 position，表示需要修改的元素的索引；第二个参数是 NewItem，表示修改后的值</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  LinkedList.prototype.update = <span class="function"><span class="keyword">function</span> (<span class="params">position, NewItem</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 1.判断是否越界</span></span><br><span class="line">    <span class="keyword">if</span> (position &lt; <span class="number">0</span> || position &gt;= <span class="built_in">this</span>.length) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> current = <span class="built_in">this</span>.head</span><br><span class="line">      <span class="keyword">let</span> index = <span class="number">0</span></span><br><span class="line">          </span><br><span class="line">      <span class="comment">// 2.遍历链表，找到索引等于position的元素对象</span></span><br><span class="line">      <span class="keyword">while</span> (index &lt; position) &#123;</span><br><span class="line">        current = current.next</span><br><span class="line">        index++</span><br><span class="line">      &#125;</span><br><span class="line">          </span><br><span class="line">      <span class="comment">// 3.将索引等于position的元素的值改为NewItem</span></span><br><span class="line">      current.item = NewItem</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * removeAt()方法就是用于移除链表中某位置上的某元素。该方法只需要传入一个参数 position，表示需要移除元素的索引</span></span><br><span class="line"><span class="comment">   * 思路</span></span><br><span class="line"><span class="comment">   *    判断 position 是否越界，若越界，则直接返回 false 表示移除元素失败</span></span><br><span class="line"><span class="comment">        若没有越界，判断 position 是否等于 0，若等于 0，则直接将链表第一个元素的 next 值赋值给 head，然后 length - 1</span></span><br><span class="line"><span class="comment">        若 position 不等于 0，则遍历链表，同时记录当前索引 index，遍历的当前元素 current，current的上一个元素 prev</span></span><br><span class="line"><span class="comment">        当 index === position时，则将 current 的 next 值赋值给 prev 的 next 值即可，同时 length - 1</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  LinkedList.prototype.removeAt = <span class="function"><span class="keyword">function</span> (<span class="params">position</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 1.判断是否越界</span></span><br><span class="line">    <span class="keyword">if</span> (position &lt; <span class="number">0</span> || position &gt;= <span class="built_in">this</span>.length) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    <span class="keyword">let</span> current = <span class="built_in">this</span>.head</span><br><span class="line">    <span class="keyword">let</span> prev = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">let</span> index = <span class="number">0</span></span><br><span class="line">    <span class="comment">// 2.判断position是否等于 0</span></span><br><span class="line">    <span class="keyword">if</span> (position === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="built_in">this</span>.head = current.next</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">//遍历链表</span></span><br><span class="line">      <span class="keyword">while</span> (index &lt; position) &#123;</span><br><span class="line">        prev = current</span><br><span class="line">        current = current.next</span><br><span class="line">        index++</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//移除对应的元素</span></span><br><span class="line">      prev.next = current.next</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 5.链表元素 -1</span></span><br><span class="line">    <span class="built_in">this</span>.length--</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//移除某元素</span></span><br><span class="line">  LinkedList.prototype.remove = <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 1.获取data在链表中的索引</span></span><br><span class="line">    <span class="keyword">let</span> index = <span class="built_in">this</span>.indexOf(data)</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 2.利用removeAt()方法删除链表中的data</span></span><br><span class="line">    <span class="built_in">this</span>.removeAt(index)</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 3.返回被删除元素data在链表中的索引</span></span><br><span class="line">    <span class="keyword">return</span> index</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//判断链表是否为空</span></span><br><span class="line">  LinkedList.prototype.isEmpty = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.length === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//返回链表的元素个数</span></span><br><span class="line">  LinkedList.prototype.size = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.length</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//展示整个链表</span></span><br><span class="line">  LinkedList.prototype.toString = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> string = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">let</span> current = <span class="built_in">this</span>.head</span><br><span class="line">    <span class="keyword">while</span> (current) &#123;</span><br><span class="line">        string += <span class="string">`<span class="subst">$&#123;current.item&#125;</span> `</span></span><br><span class="line">        current = current.next</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> string</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;链表&quot;&gt;&lt;a href=&quot;#链表&quot; class=&quot;headerlink&quot; title=&quot;链表&quot;&gt;&lt;/a&gt;链表&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;center&quot;&gt;方法&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;含义&lt;/th</summary>
      
    
    
    
    <category term="数据结构" scheme="https://thiswhl.cn/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="链表" scheme="https://thiswhl.cn/tags/%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>优先级队列</title>
    <link href="https://thiswhl.cn/post/36266.html"/>
    <id>https://thiswhl.cn/post/36266.html</id>
    <published>2021-11-05T02:12:10.000Z</published>
    <updated>2021-11-05T02:31:23.691Z</updated>
    
    <content type="html"><![CDATA[<h2 id="优先级队列"><a href="#优先级队列" class="headerlink" title="优先级队列"></a>优先级队列</h2><p> <em>在向优先级队列插入元素时，每个元素有一个自己的号码牌， 表示该元素是排在队列的前端还是后端。因此，在优先级队列里，也就没有先进先出这样一个结构特点了。</em></p><table><thead><tr><th align="center">方法</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">enqueue()</td><td align="center">向队列后端添加元素</td></tr><tr><td align="center">dequeue()</td><td align="center">删除队列最前端的元素，并返回该元素</td></tr><tr><td align="center">front()</td><td align="center">返回队列前端的元素，但不会移除该元素</td></tr><tr><td align="center">isEmpty()</td><td align="center">查看队列是否为空</td></tr><tr><td align="center">size()</td><td align="center">返回队列元素的个数</td></tr><tr><td align="center">toString()</td><td align="center">以字符串的形式展示队列内的所有元素</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 优先级队列(数组实现)：</span></span><br><span class="line"><span class="comment"> *        在向优先级队列插入元素时，每个元素有一个自己的号码牌，</span></span><br><span class="line"><span class="comment"> *        表示该元素是排在队列的前端还是后端。因此，在优先级队列里，也就没有先进先出这样一个结构特点了。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 因为是基于数组实现的队列，</span></span><br><span class="line"><span class="comment"> * 所以我们可以把数组的头部看作是队列的前端，把数组的尾部看作是队列的后端。这里我们规定数字越小的优先级越大</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">PriorityQueue</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">//属性</span></span><br><span class="line">  <span class="built_in">this</span>.list = [];</span><br><span class="line"></span><br><span class="line">  <span class="comment">//创建内部构造函数</span></span><br><span class="line">  <span class="comment">/*我们准备在刚才创建的构造函数的内部再创建一个构造函数，为什么要这么做呢？</span></span><br><span class="line"><span class="comment">  在优先级队列中存储的元素都具有两个值，分别是 存入的数据 、号码牌（优先级），</span></span><br><span class="line"><span class="comment">  所以我们准备创建一个这样的构造函数，来存储这两个值，之后需要插入一个元素时，就可以直接 new 一个实例对象出来。</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="comment">//创建内部构造函数，存储元素的数据和优先级</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">EachElement</span>(<span class="params">e, num</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.element = e;</span><br><span class="line">    <span class="built_in">this</span>.priority = num;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//enqueue()方法就是向优先级队列添加一个元素，并自动根据每个元素的优先级插入到合适的位置。</span></span><br><span class="line">  <span class="comment">// 方法实现思路：</span></span><br><span class="line">  <span class="comment">//  先创建一个新元素的实例对象，将元素的值和优先级传给该实例对象</span></span><br><span class="line">  <span class="comment">//  先判断队列是否为空。若为空，则直接向队列添加该元素</span></span><br><span class="line">  <span class="comment">//  队列不为空，则从头遍历整个队列，判断我们要添加的元素与队列中的元素哪个优先级更大，然后在合适的位置插入元素</span></span><br><span class="line">  <span class="comment">//  若我们要添加的元素比当前队列中所有元素的优先级都要小，那么直接在队列后端添加该元素</span></span><br><span class="line">  PriorityQueue.prototype.enqueue = <span class="function"><span class="keyword">function</span> (<span class="params">e, priority</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 1.创建新元素的实例对象</span></span><br><span class="line">    <span class="keyword">let</span> element = <span class="keyword">new</span> EachElement(e, priority);</span><br><span class="line">    <span class="comment">// 2.判断队列是否为空</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.list.length === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="built_in">this</span>.list.push(element);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 3.队列不为空，遍历整个队列，比较优先级大小</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">in</span> <span class="built_in">this</span>.list) &#123;</span><br><span class="line">      <span class="keyword">if</span> (element.priority &lt; <span class="built_in">this</span>.list[i].priority) &#123;</span><br><span class="line">        <span class="built_in">this</span>.list.splice(i, <span class="number">0</span>, element);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 4.新元素优先级最小，直接添加到队列的后端</span></span><br><span class="line">    <span class="built_in">this</span>.list.push(element);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//出列</span></span><br><span class="line">  PriorityQueue.prototype.dequeue = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.list.shift();</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">//front() 返回优先级队列第一个元素</span></span><br><span class="line">  PriorityQueue.prototype.front = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.list[<span class="number">0</span>];</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">//isEmpty() 判断优先级队列是否为空</span></span><br><span class="line">  PriorityQueue.prototype.isEmpty = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.list.length === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">//size() 返回优先级队列的元素个数</span></span><br><span class="line">  PriorityQueue.prototype.size = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.list.length;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">//返回当前优先级队列  与普通队列的 toString()方法不同的是，它不仅会将元素的值展示出来，还会展示每个元素的优先级。</span></span><br><span class="line">  PriorityQueue.prototype.toString = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> string = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">in</span> <span class="built_in">this</span>.list) &#123;</span><br><span class="line">      string += <span class="string">`<span class="subst">$&#123;<span class="built_in">this</span>.list[i].element&#125;</span>:<span class="subst">$&#123;<span class="built_in">this</span>.list[i].priority&#125;</span> `</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> string;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;优先级队列&quot;&gt;&lt;a href=&quot;#优先级队列&quot; class=&quot;headerlink&quot; title=&quot;优先级队列&quot;&gt;&lt;/a&gt;优先级队列&lt;/h2&gt;&lt;p&gt; &lt;em&gt;在向优先级队列插入元素时，每个元素有一个自己的号码牌， 表示该元素是排在队列的前端还是后端。因此，在优先级</summary>
      
    
    
    
    <category term="数据结构" scheme="https://thiswhl.cn/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="优先级队列" scheme="https://thiswhl.cn/tags/%E4%BC%98%E5%85%88%E7%BA%A7%E9%98%9F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>归并排序</title>
    <link href="https://thiswhl.cn/post/63711.html"/>
    <id>https://thiswhl.cn/post/63711.html</id>
    <published>2021-11-05T01:31:25.000Z</published>
    <updated>2021-11-05T02:31:39.538Z</updated>
    
    <content type="html"><![CDATA[<h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><p><em>归并排序（Merge sort）是建立在归并操作上的一种有效的排序算法，归并排序对序列的元素进行逐层折半分组，然后从最小分组开始比较排序，合并成一个大的分组，逐层进行，最终所有的元素都是有序的</em></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mergeSort</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (arr == <span class="literal">null</span> || arr.length &lt; <span class="number">2</span>) <span class="keyword">return</span>; <span class="comment">//边界检查</span></span><br><span class="line">  <span class="keyword">while</span> (arr.length &gt; <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> length = arr.length;</span><br><span class="line">    <span class="comment">//存放所有元素组合后的结果数组</span></span><br><span class="line">    <span class="keyword">let</span> result = [];</span><br><span class="line">    <span class="comment">//进行 length / 2 次</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="built_in">Math</span>.floor(length / <span class="number">2</span>); i++) &#123;</span><br><span class="line">      <span class="keyword">let</span> left = [].concat(arr.shift());</span><br><span class="line">      <span class="keyword">let</span> right = [].concat(arr.shift());</span><br><span class="line">      <span class="comment">//组合后的元素</span></span><br><span class="line">      <span class="keyword">let</span> new_arr = [];</span><br><span class="line">      <span class="comment">//取出两个数组中头部的元素进行比较  直到有一个数组为空</span></span><br><span class="line">      <span class="keyword">while</span> (left.length &gt; <span class="number">0</span> &amp;&amp; right.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> min = left[<span class="number">0</span>] &gt; right[<span class="number">0</span>] ? right.shift() : left.shift();</span><br><span class="line">        new_arr.push(min);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//存放到结果数组当中</span></span><br><span class="line">      result.push(new_arr.concat(left.length === <span class="number">0</span> ? right : left));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//未成组的情况</span></span><br><span class="line">    <span class="keyword">if</span> (arr.length === <span class="number">1</span>) &#123;</span><br><span class="line">      result.push(arr[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//将组合后的数组作为下次遍历的对象</span></span><br><span class="line">    arr = result;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>**稳定性:**相同元素的前后顺序并没有改变，所以归并排序是一种稳定排序算法</p><p><strong>时间复杂度</strong>:归并排序算法每次将序列折半分组，共需要logn轮，因此归并排序算法的时间复杂度是O(nlogn)**</p><p>**适用场景:**数据量大，并且对稳定性有要求的情况</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;归并排序&quot;&gt;&lt;a href=&quot;#归并排序&quot; class=&quot;headerlink&quot; title=&quot;归并排序&quot;&gt;&lt;/a&gt;归并排序&lt;/h2&gt;&lt;p&gt;&lt;em&gt;归并排序（Merge sort）是建立在归并操作上的一种有效的排序算法，归并排序对序列的元素进行逐层折半分组，然后从</summary>
      
    
    
    
    <category term="算法" scheme="https://thiswhl.cn/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="归并排序" scheme="https://thiswhl.cn/tags/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>希尔排序</title>
    <link href="https://thiswhl.cn/post/15468.html"/>
    <id>https://thiswhl.cn/post/15468.html</id>
    <published>2021-11-05T01:23:42.000Z</published>
    <updated>2021-11-05T02:31:53.601Z</updated>
    
    <content type="html"><![CDATA[<h2 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h2><p><em>希尔排序也叫做缩小增量排序，它通过先设置一个增量n，大小为数组长度的一半，将间隔为n的元素视作一个组，然后对每个组内部的元素进行从小到大进行<strong>插入排序</strong>；然后再将增量n缩小一半，再次进行分组<strong>插入排序</strong>，直到增量n为1，因为增量为1的时候，所有的元素都为同一个组了</em></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">shellSort</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//边界检查</span></span><br><span class="line">  <span class="keyword">if</span> (arr == <span class="literal">null</span> || arr.length &lt; <span class="number">2</span>) <span class="keyword">return</span>;</span><br><span class="line">  <span class="keyword">let</span> length = arr.length;</span><br><span class="line">  <span class="keyword">let</span> interval = <span class="built_in">Math</span>.floor(length / <span class="number">2</span>);</span><br><span class="line">  <span class="keyword">while</span> (interval &gt;= <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = interval; i &lt; length; i++) &#123;</span><br><span class="line">      <span class="keyword">let</span> temp = arr[i];</span><br><span class="line">      <span class="keyword">let</span> j = i;</span><br><span class="line">      <span class="keyword">while</span> (arr[j - interval] &gt; temp &amp;&amp; j - interval &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        arr[j] = arr[j - interval];</span><br><span class="line">        j -= interval;</span><br><span class="line">      &#125;</span><br><span class="line">      arr[j] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    interval = <span class="built_in">Math</span>.floor(interval / <span class="number">2</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>稳定性</strong>:希尔排序是直接插入排序的优化版，在排序过程中，会根据间隔将一个序列划分为不同的逻辑分组，在不同的逻辑分组中，有可能将相同元素的相对位置改变。如[2,2,4,1]，按间隔为2，降序排序，前两个元素的相对位置就会改变。因此，希尔排序是<strong>不稳定</strong>的排序方式。</p><p><strong>时间复杂度</strong>:希尔排序在最坏情况下的时间复杂度为O(n<sup>2</sup>)，平均情况下的时间复杂度为O(n<sup>1.3</sup>)。</p><p><strong>适用场景</strong>:待排序序列元素较少时。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;希尔排序&quot;&gt;&lt;a href=&quot;#希尔排序&quot; class=&quot;headerlink&quot; title=&quot;希尔排序&quot;&gt;&lt;/a&gt;希尔排序&lt;/h2&gt;&lt;p&gt;&lt;em&gt;希尔排序也叫做缩小增量排序，它通过先设置一个增量n，大小为数组长度的一半，将间隔为n的元素视作一个组，然后对每个组内</summary>
      
    
    
    
    <category term="算法" scheme="https://thiswhl.cn/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="希尔排序" scheme="https://thiswhl.cn/tags/%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>快速排序</title>
    <link href="https://thiswhl.cn/post/11306.html"/>
    <id>https://thiswhl.cn/post/11306.html</id>
    <published>2021-11-05T01:18:55.000Z</published>
    <updated>2021-11-05T02:31:44.768Z</updated>
    
    <content type="html"><![CDATA[<h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><p>每趟排序时选出一个基准值，然后将所有元素与该基准值比较，并按大小分成左右两堆，然后递归执行该过程，直到所有元素都完成排序。分区过程，将比这个数大的数全放到它的右边，小于或等于它的数全放到它的左边。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">quick_sort</span>(<span class="params">arr, <span class="keyword">from</span>, to</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> i = <span class="keyword">from</span>; <span class="comment">//哨兵i</span></span><br><span class="line">  <span class="keyword">let</span> j = to; <span class="comment">//哨兵j</span></span><br><span class="line">  <span class="keyword">let</span> pivot = arr[<span class="keyword">from</span>]; <span class="comment">//标准值</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">from</span> &gt;= to) &#123;</span><br><span class="line">    <span class="comment">//如果数组只有一个元素</span></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> (i &lt; j) &#123;</span><br><span class="line">    <span class="keyword">while</span> (arr[j] &gt; pivot &amp;&amp; i &lt; j) &#123;</span><br><span class="line">      <span class="comment">//从右边向左找第一个比pivot小的数，找到或者两个哨兵相碰，跳出循环</span></span><br><span class="line">      j--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (arr[i] &lt;= pivot &amp;&amp; i &lt; j) &#123;</span><br><span class="line">      <span class="comment">//从左边向右找第一个比pivot大的数，找到或者两个哨兵相碰，跳出循环,这里的=号保证在本轮循环结束前</span></span><br><span class="line">      <span class="comment">//，pivot的位置不变，否则的话跳出循环，交换i和from的位置的时候，from位置的上元素有可能不是pivot</span></span><br><span class="line">      i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">  代码执行道这里，1、两个哨兵到找到了目标值。2、j哨兵找到了目标值。3、两个哨兵都没找到(pivot是当前数组最小值)</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line">    <span class="keyword">if</span> (i &lt; j) &#123;</span><br><span class="line">      <span class="comment">//交换两个元素的位置</span></span><br><span class="line">      <span class="comment">// let temp = arr[i];</span></span><br><span class="line">      <span class="comment">// arr[i] = arr[j];</span></span><br><span class="line">      <span class="comment">// arr[j] = temp;</span></span><br><span class="line">      [arr[i], arr[j]] = [arr[j], arr[i]];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  arr[<span class="keyword">from</span>] = arr[i]; <span class="comment">//</span></span><br><span class="line">  arr[i] = pivot;</span><br><span class="line">  quick_sort(arr, <span class="keyword">from</span>, i - <span class="number">1</span>);</span><br><span class="line">  quick_sort(arr, i + <span class="number">1</span>, to);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>稳定性</strong>:在使用快速排序时，每次元素分堆都要选择基准因子。此时，基准因子两边都有可能出现和基准因子相同的元素，如序列[1,3,2,4,3,4,6,3]，如果选择了array[4]作为基准因子，那么array[1]和array[7]势必会被分到基准因子的同一侧，序列的稳定性被破坏。所以，快速排序是一种 <em>不稳定</em>  的排序算法。</p><p><strong>时间复杂度</strong>:快速排序的时间复杂度是O(nlogn)</p><p><strong>适用场景</strong>：待排序序列元素较多，并且元素较无序</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;快速排序&quot;&gt;&lt;a href=&quot;#快速排序&quot; class=&quot;headerlink&quot; title=&quot;快速排序&quot;&gt;&lt;/a&gt;快速排序&lt;/h2&gt;&lt;p&gt;每趟排序时选出一个基准值，然后将所有元素与该基准值比较，并按大小分成左右两堆，然后递归执行该过程，直到所有元素都完成排序。分</summary>
      
    
    
    
    <category term="算法" scheme="https://thiswhl.cn/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="快速排序" scheme="https://thiswhl.cn/tags/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>插入排序</title>
    <link href="https://thiswhl.cn/post/50190.html"/>
    <id>https://thiswhl.cn/post/50190.html</id>
    <published>2021-11-05T01:14:54.000Z</published>
    <updated>2021-11-05T02:31:34.003Z</updated>
    
    <content type="html"><![CDATA[<h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><p><em>将初始数据分为有序部分和无序部分，每一步将一个无序部分的数据插入到前面已经排好序的有序部分中，直到插完所有元素为止。</em></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> insertionSort = <span class="function">(<span class="params">arr</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (arr == <span class="literal">null</span> || arr.length &lt; <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = i - <span class="number">1</span>; j &gt;= <span class="number">0</span> &amp;&amp; arr[j] &gt; arr[j + <span class="number">1</span>]; j--) &#123;</span><br><span class="line">      <span class="comment">//j--从右向左的一个过程</span></span><br><span class="line">      <span class="comment">//如果左边的值大于右边的，则交换</span></span><br><span class="line">      [arr[j], arr[j + <span class="number">1</span>]] = [arr[j + <span class="number">1</span>], arr[j]];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>稳定性</strong>:在使用插入排序时，元素从无序部分移动到有序部分时，必须是不相等(大于或小于)时才会移动，相等时不处理，所以直接插入排序是稳定的。</p><p><strong>时间复杂度</strong>：在插入排序中，当待排序序列是有序时，是最优的情况，只需当前数跟前一个数比较一下就可以了，这时一共需要比较n- 1次，时间复杂度为O(n)。<br>  最坏的情况是待排序数组是逆序的，此时需要比较次数最多，总次数记为：1+2+3+…+N-1，所以，插入排序最坏情况下的时间复杂度为O(n<sup>2</sup>)。<br>  平均来说，array[1…j-1]中的一半元素小于array[j]，一半元素大于array[j]。插入排序在平均情况运行时间与最坏情况运行时间一样，是O(n<sup>2</sup>)。<br><strong>适用场景</strong>:待排序序列的元素个数不多(&lt;=50)，且元素基本有序。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;插入排序&quot;&gt;&lt;a href=&quot;#插入排序&quot; class=&quot;headerlink&quot; title=&quot;插入排序&quot;&gt;&lt;/a&gt;插入排序&lt;/h2&gt;&lt;p&gt;&lt;em&gt;将初始数据分为有序部分和无序部分，每一步将一个无序部分的数据插入到前面已经排好序的有序部分中，直到插完所有元素为止。</summary>
      
    
    
    
    <category term="算法" scheme="https://thiswhl.cn/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="插入排序" scheme="https://thiswhl.cn/tags/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>选择排序</title>
    <link href="https://thiswhl.cn/post/51203.html"/>
    <id>https://thiswhl.cn/post/51203.html</id>
    <published>2021-11-05T01:10:05.000Z</published>
    <updated>2021-11-05T02:31:57.372Z</updated>
    
    <content type="html"><![CDATA[<h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><p><em>它的工作原理是：第一次从待排序的数据元素中选出最小（或最大）的一个元素， 存放在序列的起始位置，然后再从剩余的未排序元素中寻找到最小（大）元素，继续放在起始位置直到未排序元素个数为0。</em></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> selectionSort = <span class="function">(<span class="params">arr</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//边界检查 判断数组为空或只有一个元素的时候</span></span><br><span class="line">  <span class="keyword">if</span> (arr == <span class="literal">null</span> || arr.length &lt; <span class="number">2</span>) <span class="keyword">return</span> ;</span><br><span class="line">  <span class="keyword">let</span> len = arr.length;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len - <span class="number">1</span>; i++) &#123;</span><br><span class="line">    <span class="comment">//min变量保存该趟比较过程中，最小元素所对应的索引，</span></span><br><span class="line">    <span class="comment">//先假设前面的元素为最小元素</span></span><br><span class="line">    <span class="keyword">let</span> minIndex = i;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = i + <span class="number">1</span>; j &lt; len; j++) &#123;</span><br><span class="line">      <span class="comment">//如果后面的元素小 则将后面的元素设置为最小索引</span></span><br><span class="line">      <span class="keyword">if</span> (arr[j] &lt; arr[minIndex]) &#123;</span><br><span class="line">        minIndex = j;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//然后交换此次查找的最小值和原始的最小值</span></span><br><span class="line">    [arr[i], arr[minIndex]] = [arr[minIndex], arr[i]];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>稳定性</strong>:  在选择排序中，每趟都会选出最大元素与最小元素，然后与两端元素交换，此时，待排序序列中如果存在与原来两端元素相等的元素，稳定性就可能被破坏。如[5,3,5,2,9]，在array[0]与array[3]元素交换时，序列的稳定性就被破坏了，所以选择排序是一种不稳定的排序算法。</p><p><strong>时间复杂度</strong>: 选择排序的时间复杂度为O(n<sup>2</sup>)。</p><p><strong>使用场景</strong>: 待排序序列中，元素个数较少时。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;选择排序&quot;&gt;&lt;a href=&quot;#选择排序&quot; class=&quot;headerlink&quot; title=&quot;选择排序&quot;&gt;&lt;/a&gt;选择排序&lt;/h2&gt;&lt;p&gt;&lt;em&gt;它的工作原理是：第一次从待排序的数据元素中选出最小（或最大）的一个元素， 存放在序列的起始位置，然后再从剩余的未排序</summary>
      
    
    
    
    <category term="算法" scheme="https://thiswhl.cn/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="选择排序" scheme="https://thiswhl.cn/tags/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>冒泡排序</title>
    <link href="https://thiswhl.cn/post/21238.html"/>
    <id>https://thiswhl.cn/post/21238.html</id>
    <published>2021-11-04T12:14:20.000Z</published>
    <updated>2021-11-05T02:31:48.608Z</updated>
    
    <content type="html"><![CDATA[<h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><p><em>主要的思路其实就是从最左边开始，依次比较相邻两个元素的大小，若左边的数大于右边的数就进行交换，这样把所有的相邻元素都比较一遍以后，最右边的数就是其中最大的数了。</em></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> bubbleSort = <span class="function">(<span class="params">arr</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> len = arr.length;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len - <span class="number">1</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; len - <span class="number">1</span> - i; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line">        [arr[j], arr[j + <span class="number">1</span>]] = [arr[j + <span class="number">1</span>], arr[j]];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">7</span>];</span><br><span class="line"><span class="built_in">console</span>.log(bubbleSort(arr));</span><br></pre></td></tr></table></figure><p><strong>稳定性</strong>:  在冒泡排序中，遇到相等的值，是不进行交换的，只有遇到   不相等的值才进行交换，所以是稳定的排序方式。</p><p><strong>时间复杂度</strong>: 冒泡排序总的平均时间复杂度为O(n2)</p><p><strong>使用场景</strong>: 适用于数据量很小的排序场景，因为冒泡的实现方式较为简单</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;冒泡排序&quot;&gt;&lt;a href=&quot;#冒泡排序&quot; class=&quot;headerlink&quot; title=&quot;冒泡排序&quot;&gt;&lt;/a&gt;冒泡排序&lt;/h2&gt;&lt;p&gt;&lt;em&gt;主要的思路其实就是从最左边开始，依次比较相邻两个元素的大小，若左边的数大于右边的数就进行交换，这样把所有的相邻元素都</summary>
      
    
    
    
    <category term="算法" scheme="https://thiswhl.cn/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="冒泡排序" scheme="https://thiswhl.cn/tags/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>学习队列结构</title>
    <link href="https://thiswhl.cn/post/59869.html"/>
    <id>https://thiswhl.cn/post/59869.html</id>
    <published>2021-11-04T11:37:42.000Z</published>
    <updated>2021-11-05T02:32:01.705Z</updated>
    
    <content type="html"><![CDATA[<h1 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h1><p><strong>队列</strong>就是一个受限的线性表，遵循着“<strong>先进先出，后进后出</strong>”的原则，即只允许在队列的前端删除元素，在队列的后端进行添加元素。</p><table><thead><tr><th align="center">方法</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">enqueue()</td><td align="center">向队列后端添加元素</td></tr><tr><td align="center">dequeue()</td><td align="center">删除队列最前端的元素，并返回该元素</td></tr><tr><td align="center">front()</td><td align="center">返回队列前端的元素，但不会移除该元素</td></tr><tr><td align="center">isEmpty()</td><td align="center">查看队列是否为空</td></tr><tr><td align="center">size()</td><td align="center">返回队列元素的个数</td></tr><tr><td align="center">toString()</td><td align="center">以字符串的形式展示队列内的所有元素</td></tr></tbody></table><p><em>接下来看下代码</em></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Queue</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">//属性</span></span><br><span class="line">  <span class="built_in">this</span>.list = [];</span><br><span class="line">  <span class="comment">//enqueue()方法就是向一个队列的后端（数组的尾部）添加新的元素的方法</span></span><br><span class="line">  Queue.prototype.enqueue = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.list.push(e);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">//dequeue()方法就是删除队列中最前端（数组的前面）的一个元素，并返回该元素</span></span><br><span class="line">  Queue.prototype.dequeue = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.list.shift(e);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">//front()方法就是返回队列最前端（数组的前面）的第一个元素，并且不会对队列里的数组进行任何的操作</span></span><br><span class="line">  Queue.prototype.front = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.list[<span class="number">0</span>];</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">//isEmpty()方法就是判断队列是否为空（数组内是否有元素），若为空，则返回 true；否则，返回 false</span></span><br><span class="line">  Queue.prototype.isEmpty = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.list.length === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">//size()方法就是查询并返回队列中的元素个数（数组的长度）</span></span><br><span class="line">  Queue.prototype.size = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.list.length;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">//toString()方法就是将队列内的元素用字符串的方式展示出来（将数组转化成字符串）并返回</span></span><br><span class="line">  Queue.prototype.toString = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> string = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">in</span> <span class="built_in">this</span>.list) &#123;</span><br><span class="line">      string += <span class="string">`<span class="subst">$&#123;<span class="built_in">this</span>.list[i]&#125;</span> `</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> string;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 改版击鼓传花</span></span><br><span class="line"><span class="comment"> *   几个人围坐成一个圈，指定一个数字，例如3，选其中一个人开始数数，数到3的那个人被淘汰，</span></span><br><span class="line"><span class="comment"> *   然后从刚刚被淘汰的人的下一个人重新开始数。以此类推……直到只剩一个人，那么这个剩下的人就是获胜者</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *   其实很简单，因为所有人坐成一个圈形成了一个循环，所以我们可以每数一个数，将队列前端的元素取出，</span></span><br><span class="line"><span class="comment"> *   再重新添加到队列的后端，如果是数到了刚开始规定的数字，则该被取出的元素不再被添加到队列的后端了，</span></span><br><span class="line"><span class="comment"> *   然后又继续重新数数，以此类推……直到队列里只有一个元素了，该元素就是最终获胜的。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">passFlower</span>(<span class="params">member, num</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> queue = <span class="keyword">new</span> Queue();</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; member.length; i++) &#123;</span><br><span class="line">    queue.enqueue(member[i]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> (queue.list.length !== <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; num - <span class="number">1</span>; i++) &#123;</span><br><span class="line">      queue.enqueue(queue.dequeue());</span><br><span class="line">    &#125;</span><br><span class="line">    queue.dequeue();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> queue.list[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(passFlower([<span class="string">&quot;V&quot;</span>, <span class="string">&quot;W&quot;</span>, <span class="string">&quot;X&quot;</span>, <span class="string">&quot;Y&quot;</span>, <span class="string">&quot;Z&quot;</span>], <span class="number">3</span>)); <span class="comment">//Y</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;队列&quot;&gt;&lt;a href=&quot;#队列&quot; class=&quot;headerlink&quot; title=&quot;队列&quot;&gt;&lt;/a&gt;队列&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;队列&lt;/strong&gt;就是一个受限的线性表，遵循着“&lt;strong&gt;先进先出，后进后出&lt;/strong&gt;”的原则，即只允许在</summary>
      
    
    
    
    <category term="数据结构" scheme="https://thiswhl.cn/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="队列" scheme="https://thiswhl.cn/tags/%E9%98%9F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>学习栈结构</title>
    <link href="https://thiswhl.cn/post/50362.html"/>
    <id>https://thiswhl.cn/post/50362.html</id>
    <published>2021-11-04T11:26:38.000Z</published>
    <updated>2021-11-05T02:32:05.163Z</updated>
    
    <content type="html"><![CDATA[<h1 id="栈结构"><a href="#栈结构" class="headerlink" title="栈结构"></a>栈结构</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Stack</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.list = [];</span><br><span class="line">  <span class="comment">//push方法的实现</span></span><br><span class="line">  Stack.prototype.push = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.list.push(e);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">//pop()方法的实现</span></span><br><span class="line">  Stack.prototype.pop = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.list.pop();</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">//getTopElement()方法就相当于是查看一下栈顶的元素是什么（查看数组尾部的元素），而不会对栈内元素进行任何的入栈或出栈操作</span></span><br><span class="line">  <span class="comment">//getTopElement()方法的实现</span></span><br><span class="line">  Stack.prototype.getTopElement = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.list[<span class="built_in">this</span>.list.length - <span class="number">1</span>];</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">//isEmpty()方法的实现</span></span><br><span class="line">  Stack.prototype.isEmpty = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> size = <span class="built_in">this</span>.list.length;</span><br><span class="line">    <span class="keyword">if</span> (size === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">//size()方法的实现</span></span><br><span class="line">  Stack.prototype.size = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.list.length;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">//toString()方法就是将栈内的元素用字符串的方式展示出来（将数组转化成字符串）并返回</span></span><br><span class="line">  Stack.prototype.size = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> string = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">in</span> <span class="built_in">this</span>.list) &#123;</span><br><span class="line">      string += <span class="string">`<span class="subst">$&#123;<span class="built_in">this</span>.list[i]&#125;</span>`</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> string;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//通过栈结构实现一个函数，将输入的十进制转化成二进制</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">d2d</span>(<span class="params">number</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> stack = <span class="keyword">new</span> Stack();</span><br><span class="line">  <span class="keyword">while</span> (number &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    stack.push(number % <span class="number">2</span>);</span><br><span class="line">    number = <span class="built_in">Math</span>.floor(number / <span class="number">2</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> string = <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="keyword">while</span> (!stack.isEmpty()) &#123;</span><br><span class="line">    string += stack.pop();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> string;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;栈结构&quot;&gt;&lt;a href=&quot;#栈结构&quot; class=&quot;headerlink&quot; title=&quot;栈结构&quot;&gt;&lt;/a&gt;栈结构&lt;/h1&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;p</summary>
      
    
    
    
    <category term="数据结构" scheme="https://thiswhl.cn/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="栈" scheme="https://thiswhl.cn/tags/%E6%A0%88/"/>
    
  </entry>
  
  <entry>
    <title>react脚手架配置代理</title>
    <link href="https://thiswhl.cn/post/40546.html"/>
    <id>https://thiswhl.cn/post/40546.html</id>
    <published>2021-10-08T14:13:15.000Z</published>
    <updated>2021-10-08T14:15:55.612Z</updated>
    
    <content type="html"><![CDATA[<h1 id="react脚手架配置代理总结"><a href="#react脚手架配置代理总结" class="headerlink" title="react脚手架配置代理总结"></a>react脚手架配置代理总结</h1><h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><blockquote><p>在package.json中追加如下配置</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;proxy&quot;</span>:<span class="string">&quot;http://localhost:5000&quot;</span></span><br></pre></td></tr></table></figure><p>说明：</p><ol><li>优点：配置简单，前端请求资源时可以不加任何前缀。</li><li>缺点：不能配置多个代理。</li><li>工作方式：上述方式配置代理，当请求了3000不存在的资源时，那么该请求会转发给5000 （优先匹配前端资源）</li></ol><h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><ol><li><p>第一步：创建代理配置文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在src下创建配置文件：src/setupProxy.js</span><br></pre></td></tr></table></figure></li><li><p>编写setupProxy.js配置具体代理规则：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> proxy = <span class="built_in">require</span>(<span class="string">&#x27;http-proxy-middleware&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">app</span>) </span>&#123;</span><br><span class="line">  app.use(</span><br><span class="line">    proxy(<span class="string">&#x27;/api1&#x27;</span>, &#123;  <span class="comment">//api1是需要转发的请求(所有带有/api1前缀的请求都会转发给5000)</span></span><br><span class="line">      <span class="attr">target</span>: <span class="string">&#x27;http://localhost:5000&#x27;</span>, <span class="comment">//配置转发目标地址(能返回数据的服务器地址)</span></span><br><span class="line">      <span class="attr">changeOrigin</span>: <span class="literal">true</span>, <span class="comment">//控制服务器接收到的请求头中host字段的值</span></span><br><span class="line">      <span class="comment">/*</span></span><br><span class="line"><span class="comment">      changeOrigin设置为true时，服务器收到的请求头中的host为：localhost:5000</span></span><br><span class="line"><span class="comment">      changeOrigin设置为false时，服务器收到的请求头中的host为：localhost:3000</span></span><br><span class="line"><span class="comment">      changeOrigin默认值为false，但我们一般将changeOrigin值设为true</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">      <span class="attr">pathRewrite</span>: &#123;<span class="string">&#x27;^/api1&#x27;</span>: <span class="string">&#x27;&#x27;</span>&#125; <span class="comment">//去除请求前缀，保证交给后台服务器的是正常请求地址(必须配置)</span></span><br><span class="line">    &#125;),</span><br><span class="line">    proxy(<span class="string">&#x27;/api2&#x27;</span>, &#123; </span><br><span class="line">      <span class="attr">target</span>: <span class="string">&#x27;http://localhost:5001&#x27;</span>,</span><br><span class="line">      <span class="attr">changeOrigin</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">pathRewrite</span>: &#123;<span class="string">&#x27;^/api2&#x27;</span>: <span class="string">&#x27;&#x27;</span>&#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>说明：</p><ol><li>优点：可以配置多个代理，可以灵活的控制请求是否走代理。</li><li>缺点：配置繁琐，前端请求资源时必须加前缀。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;react脚手架配置代理总结&quot;&gt;&lt;a href=&quot;#react脚手架配置代理总结&quot; class=&quot;headerlink&quot; title=&quot;react脚手架配置代理总结&quot;&gt;&lt;/a&gt;react脚手架配置代理总结&lt;/h1&gt;&lt;h2 id=&quot;方法一&quot;&gt;&lt;a href=&quot;#方法</summary>
      
    
    
    
    <category term="前端" scheme="https://thiswhl.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="react" scheme="https://thiswhl.cn/tags/react/"/>
    
    <category term="react配置代理" scheme="https://thiswhl.cn/tags/react%E9%85%8D%E7%BD%AE%E4%BB%A3%E7%90%86/"/>
    
    <category term="react脚手架" scheme="https://thiswhl.cn/tags/react%E8%84%9A%E6%89%8B%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>自定义promise</title>
    <link href="https://thiswhl.cn/post/34739.html"/>
    <id>https://thiswhl.cn/post/34739.html</id>
    <published>2021-09-24T13:20:25.000Z</published>
    <updated>2021-11-05T02:32:12.136Z</updated>
    
    <content type="html"><![CDATA[<h1 id="学习promise"><a href="#学习promise" class="headerlink" title="学习promise"></a>学习promise</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Promise</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">executor</span>)</span> &#123;</span><br><span class="line">    <span class="comment">//添加属性</span></span><br><span class="line">    <span class="built_in">this</span>.PromiseState = <span class="string">&quot;pending&quot;</span>;</span><br><span class="line">    <span class="built_in">this</span>.PromiseResult = <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">//声明属性</span></span><br><span class="line">    <span class="built_in">this</span>.callbacks = [];</span><br><span class="line">    <span class="comment">//保存实例对象的this的值</span></span><br><span class="line">    <span class="keyword">const</span> self = <span class="built_in">this</span>;</span><br><span class="line">    <span class="comment">//resolve函数</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">resolve</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">      <span class="comment">//判断状态 promise状态只能更改一次</span></span><br><span class="line">      <span class="keyword">if</span> (self.PromiseState !== <span class="string">&quot;pending&quot;</span>) <span class="keyword">return</span>;</span><br><span class="line">      <span class="comment">//修改对象状态(promiseState)</span></span><br><span class="line">      self.PromiseState = <span class="string">&quot;fulfilled&quot;</span>;</span><br><span class="line">      <span class="comment">//修改对象结果值(promiseResult)</span></span><br><span class="line">      self.PromiseResult = data;</span><br><span class="line">      <span class="comment">//调用成功的回调函数</span></span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        self.callbacks.forEach(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">          item.onResolved(data);</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//reject函数</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">reject</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">      <span class="comment">//判断状态</span></span><br><span class="line">      <span class="keyword">if</span> (self.PromiseState !== <span class="string">&quot;pending&quot;</span>) <span class="keyword">return</span>;</span><br><span class="line">      <span class="comment">//修改对象状态(promiseState)</span></span><br><span class="line">      self.PromiseState = <span class="string">&quot;rejected&quot;</span>;</span><br><span class="line">      <span class="comment">//修改对象结果值(promiseResult)</span></span><br><span class="line">      self.PromiseResult = data;</span><br><span class="line">      <span class="comment">//调用成功的回调函数</span></span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        self.callbacks.forEach(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">          item.OnRejected(data);</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">//执行器函数在内部是同步调用的</span></span><br><span class="line">      executor(resolve, reject);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      <span class="comment">//修改promise对象状态为【失败】</span></span><br><span class="line">      reject(e);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//then</span></span><br><span class="line">  <span class="function"><span class="title">then</span>(<span class="params">onResolved, OnRejected</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> self = <span class="built_in">this</span>;</span><br><span class="line">    <span class="comment">//判断回调函数</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> onResolved !== <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">      OnRejected = <span class="function">(<span class="params">reason</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> reason;</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> onResolved !== <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">      onResolved = <span class="function">(<span class="params">value</span>) =&gt;</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">//封装函数</span></span><br><span class="line">      <span class="function"><span class="keyword">function</span> <span class="title">callback</span>(<span class="params">type</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="comment">//获取回调函数的执行结果</span></span><br><span class="line">          <span class="keyword">let</span> result = type(self.PromiseResult);</span><br><span class="line">          <span class="comment">//判断result</span></span><br><span class="line">          <span class="keyword">if</span> (result <span class="keyword">instanceof</span> <span class="built_in">Promise</span>) &#123;</span><br><span class="line">            <span class="comment">//如果是Promise类型的对象</span></span><br><span class="line">            result.then(</span><br><span class="line">              <span class="function">(<span class="params">v</span>) =&gt;</span> &#123;</span><br><span class="line">                resolve(v);</span><br><span class="line">              &#125;,</span><br><span class="line">              <span class="function">(<span class="params">r</span>) =&gt;</span> &#123;</span><br><span class="line">                reject(r);</span><br><span class="line">              &#125;</span><br><span class="line">            );</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//结果的对像状态为成功</span></span><br><span class="line">            resolve(result);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">          reject(e);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//调用回调函数  PromiseState</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.PromiseState === <span class="string">&quot;fulfilled&quot;</span>) &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          callback(onResolved);</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.PromiseState === <span class="string">&quot;rejected&quot;</span>) &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          callback(OnRejected);</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//判断pending状态</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.PromiseState === <span class="string">&quot;pending&quot;</span>) &#123;</span><br><span class="line">        <span class="comment">//保存回调函数</span></span><br><span class="line">        <span class="built_in">this</span>.callbacks.push(&#123;</span><br><span class="line">          <span class="attr">onResolved</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            callback(onResolved);</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">OnRejected</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            callback(OnRejected);</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//catch</span></span><br><span class="line">  <span class="keyword">catch</span>(OnRejected) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.then(<span class="literal">undefined</span>, OnRejected);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//resolve</span></span><br><span class="line">  <span class="keyword">static</span> <span class="function"><span class="title">resolve</span>(<span class="params">value</span>)</span> &#123;</span><br><span class="line">    <span class="comment">//返回promise对象</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (value <span class="keyword">instanceof</span> <span class="built_in">Promise</span>) &#123;</span><br><span class="line">        value.then(</span><br><span class="line">          <span class="function">(<span class="params">v</span>) =&gt;</span> &#123;</span><br><span class="line">            resolve(v);</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="function">(<span class="params">r</span>) =&gt;</span> &#123;</span><br><span class="line">            reject(r);</span><br><span class="line">          &#125;</span><br><span class="line">        );</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//状态设置为成功</span></span><br><span class="line">        resolve(value);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//reject</span></span><br><span class="line">  <span class="keyword">static</span> <span class="function"><span class="title">reject</span>(<span class="params">reason</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      reject(reason);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//all</span></span><br><span class="line">  <span class="keyword">static</span> <span class="function"><span class="title">all</span>(<span class="params">promises</span>)</span> &#123;</span><br><span class="line">    <span class="comment">//返回结果为promise对象</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">//声明变量</span></span><br><span class="line">      <span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">let</span> arr = [];</span><br><span class="line">      <span class="comment">//遍历</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; promises.length; i++) &#123;</span><br><span class="line">        <span class="built_in">Promise</span>.then(</span><br><span class="line">          <span class="function">(<span class="params">v</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">//得知对象的状态是成功</span></span><br><span class="line">            <span class="comment">//每个promise对象都成功</span></span><br><span class="line">            count++;</span><br><span class="line">            <span class="comment">//将当前promise对象成功的结果存入到数组中</span></span><br><span class="line">            arr[i] = v;</span><br><span class="line">            <span class="keyword">if</span> (count === promises.length) &#123;</span><br><span class="line">              <span class="comment">//修改状态</span></span><br><span class="line">              resolve(arr);</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="function">(<span class="params">r</span>) =&gt;</span> &#123;</span><br><span class="line">            reject(r);</span><br><span class="line">          &#125;</span><br><span class="line">        );</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//race</span></span><br><span class="line">  <span class="keyword">static</span> <span class="function"><span class="title">race</span>(<span class="params">promises</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; promises.length; i++) &#123;</span><br><span class="line">        promises[i].then(</span><br><span class="line">          <span class="function">(<span class="params">v</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">//修改返回对象的状态为成功</span></span><br><span class="line">            resolve(v);</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="function">(<span class="params">r</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">//修改返回对象的状态为成功</span></span><br><span class="line">            reject(r);</span><br><span class="line">          &#125;</span><br><span class="line">        );</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;学习promise&quot;&gt;&lt;a href=&quot;#学习promise&quot; class=&quot;headerlink&quot; title=&quot;学习promise&quot;&gt;&lt;/a&gt;学习promise&lt;/h1&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;</summary>
      
    
    
    
    <category term="前端" scheme="https://thiswhl.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="js" scheme="https://thiswhl.cn/tags/js/"/>
    
    <category term="promise" scheme="https://thiswhl.cn/tags/promise/"/>
    
  </entry>
  
  <entry>
    <title>jsx语法规则</title>
    <link href="https://thiswhl.cn/post/15151.html"/>
    <id>https://thiswhl.cn/post/15151.html</id>
    <published>2021-09-03T10:00:17.000Z</published>
    <updated>2021-09-03T10:16:26.446Z</updated>
    
    <content type="html"><![CDATA[<h1 id="jsx语法规则"><a href="#jsx语法规则" class="headerlink" title="jsx语法规则"></a>jsx语法规则</h1><p>​    1.定义虚拟DOM，不要写引号</p><p>​    2.标签中混入js表达时要用"{}"</p><p>​    3.样式的类名指定 className</p><p>​    4.内联样式要用style ="{{key:'value'}}"的形式写</p><p>​    5.虚拟DOM必须只有一个根标签</p><p>​    6.标签必须闭合</p><p>​    7.标签首字母</p><p>​          若小写字母开头 则将该标签转为html同名元素</p><p>​          若大写字母开头 react则去渲染对应的组件</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;jsx语法规则&quot;&gt;&lt;a href=&quot;#jsx语法规则&quot; class=&quot;headerlink&quot; title=&quot;jsx语法规则&quot;&gt;&lt;/a&gt;jsx语法规则&lt;/h1&gt;&lt;p&gt;​    1.定义虚拟DOM，不要写引号&lt;/p&gt;
&lt;p&gt;​    2.标签中混入js表达时要用&quot;{}</summary>
      
    
    
    
    
    <category term="jsx语法" scheme="https://thiswhl.cn/tags/jsx%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>js中substr和substring的区别</title>
    <link href="https://thiswhl.cn/post/12206.html"/>
    <id>https://thiswhl.cn/post/12206.html</id>
    <published>2021-08-03T12:23:49.000Z</published>
    <updated>2021-11-05T02:32:17.993Z</updated>
    
    <content type="html"><![CDATA[<p>js中substr和substring都是截取字符串中子串，非常相近，可以有一个或两个参数。</p><p>语法：substr(start [，length]) 第一个字符的索引是0，start必选 length可选</p><p>　　　substring(start [, end]) 第一个字符的索引是0，start必选 end可选</p><p>相同点：当有一个参数时，两者的功能是一样的，返回从start指定的位置直到字符串结束的子串</p><p>var str = “hello Tony”;</p><p>str.substr(6); //Tony</p><p>str.substring(6); //Tony</p><p>不同点：有两个参数时</p><p>（1）substr(start,length) 返回从start位置开始length长度的子串</p><p>“goodboy”.substr(1,6);  //oodboy</p><p>【注】当length为0或者负数，返回空字符串</p><p>（2）substring(start,end) 返回从start位置开始到end位置的子串（不包含end）</p><p>“goodboy”.substring(1,6); //oodbo</p><p>【注】:</p><p>（1）substring 方法使用 start 和 end 两者中的较小值作为子字符串的起始点</p><p>（2）start 或 end 为 NaN 或者负数，那么将其替换为0</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;js中substr和substring都是截取字符串中子串，非常相近，可以有一个或两个参数。&lt;/p&gt;
&lt;p&gt;语法：substr(start [，length]) 第一个字符的索引是0，start必选 length可选&lt;/p&gt;
&lt;p&gt;　　　substring(start [,</summary>
      
    
    
    
    <category term="前端" scheme="https://thiswhl.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="js" scheme="https://thiswhl.cn/tags/js/"/>
    
    <category term="js字符串" scheme="https://thiswhl.cn/tags/js%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
  </entry>
  
  <entry>
    <title>yilia主题创建分类（categories）和标签（tags）首页</title>
    <link href="https://thiswhl.cn/post/33427.html"/>
    <id>https://thiswhl.cn/post/33427.html</id>
    <published>2021-07-31T09:32:10.000Z</published>
    <updated>2021-07-31T10:18:24.899Z</updated>
    
    <content type="html"><![CDATA[<h1 id="步骤1"><a href="#步骤1" class="headerlink" title="步骤1"></a>步骤1</h1><p>新建一个页面，命名为 ‘categories’ | ‘tags’。命令如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo new page &quot;categories&quot;</span><br><span class="line">hexo new page &quot;tags&quot;</span><br></pre></td></tr></table></figure><h1 id="步骤2"><a href="#步骤2" class="headerlink" title="步骤2"></a>步骤2</h1><p>编辑刚新建的页面，将页面的类型设置为 categories | tags ，主题将自动为这个页面显示 分类|标签云。页面内容如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 分类</span><br><span class="line">date: 2016-10-21 11:59:10</span><br><span class="line">type: &quot;categories&quot;---</span><br><span class="line">---</span><br><span class="line">title: 标签</span><br><span class="line">date: 2016-10-21 11:59:10</span><br><span class="line">type: &quot;tags&quot;</span><br><span class="line">---</span><br></pre></td></tr></table></figure><h1 id="步骤3"><a href="#步骤3" class="headerlink" title="步骤3"></a>步骤3</h1><p>修改yilia主题的配置文件 （yilia/_config.yml）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: /</span><br><span class="line">  archives: /archives</span><br><span class="line">  categories: /categories</span><br><span class="line">  tags: /tags</span><br></pre></td></tr></table></figure><h1 id="步骤4"><a href="#步骤4" class="headerlink" title="步骤4*"></a>步骤4*</h1><p>找到 <code>layout/_partial/article.ejs</code> （我用的是 yilia 主题）</p><p>然后找到 <code>&lt;div class=&quot;article-entry&quot; itemprop=&quot;articleBody&quot;&gt;</code> 这一行添加以下代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&lt;% if (page.type === &quot;tags&quot;) &#123; %&gt;</span><br><span class="line">&lt;div class=&quot;tag-cloud&quot;&gt;</span><br><span class="line">&lt;div class=&quot;tag-cloud-title&quot;&gt;</span><br><span class="line">&lt;%- _p(&#x27;counter.tag_cloud&#x27;, site.tags.length) %&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;div class=&quot;tag-cloud-tags&quot;&gt;</span><br><span class="line">&lt;%- tagcloud(&#123;</span><br><span class="line">min_font: 12,</span><br><span class="line">max_font: 30,</span><br><span class="line">amount: 200,</span><br><span class="line">color: true,</span><br><span class="line">start_color: &#x27;#ccc&#x27;,</span><br><span class="line">end_color: &#x27;#111&#x27;</span><br><span class="line">&#125;) %&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;% &#125; else if (page.type === &#x27;categories&#x27;) &#123; %&gt;</span><br><span class="line"></span><br><span class="line">&lt;div class=&quot;category-all-page&quot;&gt;</span><br><span class="line">&lt;div class=&quot;category-all-title&quot;&gt;</span><br><span class="line">&lt;%- _p(&#x27;counter.categories&#x27;, site.categories.length) %&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;div class=&quot;category-all&quot;&gt;</span><br><span class="line">&lt;%- list_categories() %&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;% &#125; else &#123; %&gt;</span><br><span class="line"></span><br><span class="line">&lt;% if (post.excerpt &amp;&amp; index)&#123; %&gt;&lt;%- post.excerpt %&gt;</span><br><span class="line">&lt;% &#125; else &#123; %&gt;</span><br><span class="line">&lt;%- post.content %&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure><h1 id="步骤5"><a href="#步骤5" class="headerlink" title="步骤5"></a>步骤5</h1><p>修改样式 找到 <code>yilia/source/css/_partial/article.styl</code> 在最后面添加下面的 css 代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line">/*tag-cloud*/</span><br><span class="line">.tag-cloud &#123;</span><br><span class="line">  text-align: center;</span><br><span class="line">  margin-top: 50px;</span><br><span class="line">&#125;</span><br><span class="line">.tag-cloud a &#123;</span><br><span class="line">  display: inline-block;</span><br><span class="line">  margin: 10px;</span><br><span class="line">&#125;</span><br><span class="line">.tag-cloud-title &#123;</span><br><span class="line">  font-weight: 700;</span><br><span class="line">  font-size: 24px;</span><br><span class="line">&#125;</span><br><span class="line">.tag-cloud-tags &#123;</span><br><span class="line">  margin-top: 15px;</span><br><span class="line">  a &#123;</span><br><span class="line">    display: inline-block;</span><br><span class="line">    text-decoration: none;</span><br><span class="line">    font-weight: normal;</span><br><span class="line">    font-size: 10px;</span><br><span class="line">    color: #fff;</span><br><span class="line">    line-height: normal;</span><br><span class="line">    padding: 5px 5px 5px 10px;</span><br><span class="line">    position: relative;</span><br><span class="line">    border-radius: 0 5px 5px 0;</span><br><span class="line">    font-family: Menlo, Monaco, &quot;Andale Mono&quot;, &quot;lucida console&quot;, &quot;Courier New&quot;, monospace;</span><br><span class="line">    &amp;:hover &#123;</span><br><span class="line">      opacity: 0.8;</span><br><span class="line">    &#125;</span><br><span class="line">    &amp;:before &#123;</span><br><span class="line">      content: &quot; &quot;;</span><br><span class="line">      width: 0;</span><br><span class="line">      height: 0;</span><br><span class="line">      position: absolute;</span><br><span class="line">      top: 0;</span><br><span class="line">      left: -18px;</span><br><span class="line">      border: 9px solid transparent;</span><br><span class="line">    &#125;</span><br><span class="line">    &amp;:after &#123;</span><br><span class="line">      content: &quot; &quot;;</span><br><span class="line">      width: 4px;</span><br><span class="line">      height: 4px;</span><br><span class="line">      </span><br><span class="line">      border-radius: 4px;</span><br><span class="line">      box-shadow: 0 0 0 1px rgba(0, 0, 0, .3);</span><br><span class="line">      position: absolute;</span><br><span class="line">      top: 7px;</span><br><span class="line">      left: 2px;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  a.color1 &#123;</span><br><span class="line">    background: #FF945C;</span><br><span class="line">    &amp;:before &#123;</span><br><span class="line">      border-right-color: #FF945C;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  a.color2 &#123;</span><br><span class="line">    background: #F5C7B7;</span><br><span class="line">    &amp;:before &#123;</span><br><span class="line">      border-right-color: #F5C7B7;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  a.color3 &#123;</span><br><span class="line">    background: #BA8F6C;</span><br><span class="line">    &amp;:before &#123;</span><br><span class="line">      border-right-color: #BA8F6C;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  a.color4 &#123;</span><br><span class="line">    background: #CFB7C4;</span><br><span class="line">    &amp;:before &#123;</span><br><span class="line">      border-right-color: #CFB7C4;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  a.color5 &#123;</span><br><span class="line">    background: #7B5D5F;</span><br><span class="line">    &amp;:before &#123;</span><br><span class="line">      border-right-color: #7B5D5F;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/*category-all-page*/</span><br><span class="line">.category-all-page &#123;</span><br><span class="line">  margin-top: 50px;</span><br><span class="line">  .category-all-title &#123;</span><br><span class="line">    font-weight: 700;</span><br><span class="line">    font-size: 24px;</span><br><span class="line">    text-align: center;</span><br><span class="line">  &#125;</span><br><span class="line">  .category-list-item:after &#123;</span><br><span class="line">    content: &#x27;&#x27;;</span><br><span class="line">    clear: both;</span><br><span class="line">    display: table;</span><br><span class="line">  &#125;</span><br><span class="line">  .category-list-count &#123;</span><br><span class="line">    float: right;</span><br><span class="line">    margin-left: 5px;</span><br><span class="line">  &#125;</span><br><span class="line">  .category-list-count:before &#123;</span><br><span class="line">    content: &#x27;一共 &#x27;;</span><br><span class="line">  &#125;</span><br><span class="line">  .category-list-count:after &#123;</span><br><span class="line">    content: &#x27; 篇文章&#x27;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>原文:<a href="http://orzcss.com/posts/5a207d64/">http://orzcss.com/posts/5a207d64/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;步骤1&quot;&gt;&lt;a href=&quot;#步骤1&quot; class=&quot;headerlink&quot; title=&quot;步骤1&quot;&gt;&lt;/a&gt;步骤1&lt;/h1&gt;&lt;p&gt;新建一个页面，命名为 ‘categories’ | ‘tags’。命令如下：&lt;/p&gt;
&lt;figure class=&quot;highligh</summary>
      
    
    
    
    <category term="博客" scheme="https://thiswhl.cn/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
    <category term="标签" scheme="https://thiswhl.cn/tags/%E6%A0%87%E7%AD%BE/"/>
    
    <category term="分类" scheme="https://thiswhl.cn/tags/%E5%88%86%E7%B1%BB/"/>
    
  </entry>
  
  <entry>
    <title>Nice to meet you</title>
    <link href="https://thiswhl.cn/post/14875.html"/>
    <id>https://thiswhl.cn/post/14875.html</id>
    <published>2021-07-31T03:36:16.000Z</published>
    <updated>2021-07-31T09:23:36.700Z</updated>
    
    
    
    
    
    <category term="你好" scheme="https://thiswhl.cn/tags/%E4%BD%A0%E5%A5%BD/"/>
    
  </entry>
  
  <entry>
    <title>测试</title>
    <link href="https://thiswhl.cn/post/37773.html"/>
    <id>https://thiswhl.cn/post/37773.html</id>
    <published>2021-07-29T13:00:11.000Z</published>
    <updated>2021-07-31T09:24:13.883Z</updated>
    
    <content type="html"><![CDATA[<h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p>132132456</p><h2 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h2><p>1231321</p><h3 id="测试-2"><a href="#测试-2" class="headerlink" title="测试"></a>测试</h3><p>132</p><h4 id="测试-3"><a href="#测试-3" class="headerlink" title="测试"></a>测试</h4><p>123123</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;测试&quot;&gt;&lt;a href=&quot;#测试&quot; class=&quot;headerlink&quot; title=&quot;测试&quot;&gt;&lt;/a&gt;测试&lt;/h1&gt;&lt;p&gt;132132456&lt;/p&gt;
&lt;h2 id=&quot;测试-1&quot;&gt;&lt;a href=&quot;#测试-1&quot; class=&quot;headerlink&quot; title=&quot;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>标题</title>
    <link href="https://thiswhl.cn/post/undefined.html"/>
    <id>https://thiswhl.cn/post/undefined.html</id>
    <published>2021-07-29T01:23:22.000Z</published>
    <updated>2021-07-29T03:15:07.483Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一级标题&quot;&gt;&lt;a href=&quot;#一级标题&quot; class=&quot;headerlink&quot; title=&quot;一级标题&quot;&gt;&lt;/a&gt;一级标题&lt;/h1&gt;&lt;h2 id=&quot;二级标题&quot;&gt;&lt;a href=&quot;#二级标题&quot; class=&quot;headerlink&quot; title=&quot;二级标题&quot;&gt;&lt;/a</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>春夏秋冬</title>
    <link href="https://thiswhl.cn/post/undefined.html"/>
    <id>https://thiswhl.cn/post/undefined.html</id>
    <published>2021-07-28T10:22:18.000Z</published>
    <updated>2021-07-29T03:19:10.304Z</updated>
    
    <content type="html"><![CDATA[<hr><h2 id="这是一篇新的文章"><a href="#这是一篇新的文章" class="headerlink" title="这是一篇新的文章"></a>这是一篇新的文章</h2><h2 id="很高兴遇见你"><a href="#很高兴遇见你" class="headerlink" title="  很高兴遇见你"></a>  很高兴遇见你</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;h2 id=&quot;这是一篇新的文章&quot;&gt;&lt;a href=&quot;#这是一篇新的文章&quot; class=&quot;headerlink&quot; title=&quot;这是一篇新的文章&quot;&gt;&lt;/a&gt;这是一篇新的文章&lt;/h2&gt;&lt;h2 id=&quot;很高兴遇见你&quot;&gt;&lt;a href=&quot;#很高兴遇见你&quot; class=&quot;hea</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>我的第一篇博客文章</title>
    <link href="https://thiswhl.cn/post/undefined.html"/>
    <id>https://thiswhl.cn/post/undefined.html</id>
    <published>2021-06-25T00:45:16.000Z</published>
    <updated>2021-07-29T01:28:15.945Z</updated>
    
    <content type="html"><![CDATA[<h2 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h2><h2 id="大家好，我是温海龙！来自河北科技工程职业技术大学，请多多关照"><a href="#大家好，我是温海龙！来自河北科技工程职业技术大学，请多多关照" class="headerlink" title="大家好，我是温海龙！来自河北科技工程职业技术大学，请多多关照"></a>大家好，我是温海龙！来自河北科技工程职业技术大学，请多多关照</h2><h2 id="第二章"><a href="#第二章" class="headerlink" title="第二章"></a>第二章</h2><h2 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h2><p>##参考文献</p><p><a href="http://www.thiswhl.cn/">www.thiswhl.cn</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;第一章&quot;&gt;&lt;a href=&quot;#第一章&quot; class=&quot;headerlink&quot; title=&quot;第一章&quot;&gt;&lt;/a&gt;第一章&lt;/h2&gt;&lt;h2 id=&quot;大家好，我是温海龙！来自河北科技工程职业技术大学，请多多关照&quot;&gt;&lt;a href=&quot;#大家好，我是温海龙！来自河北科技工程职</summary>
      
    
    
    
    
  </entry>
  
</feed>
